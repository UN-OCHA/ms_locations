<?php
/**
 * @file
 * ms_locations.module file
 */

/**
 * Implements hook_cron().
 *
 * Synchronizes and fetches locations from
 * www.humanitarianresponse.info/api/v1.0/locations on cron.
 */
function ms_locations_cron() {
  $last_pull = variable_get('ms_locations_last_pull', 0);
  $now = time();
  if ($now - $last_pull > 24 * 3600) {
    ms_locations_fetch_and_sync(0);
    ms_locations_fetch_and_sync(1);
    ms_locations_fetch_and_sync(2);
    variable_set('ms_locations_last_pull', $now);
  }
}

/**
 * Fetch and sync locations.
 *
 * Fetch and sync locations from
 * www.humanitarianresponse.info/api/v1.0/locations.
 */
function ms_locations_fetch_and_sync($admin_level) {
  $languages = array(
    'en',
    'fr',
    'es',
  );
  $installed_languages = array_keys(language_list());

  foreach ($languages as $language) {
    if (in_array($language, $installed_languages)) {
      $url = 'https://www.humanitarianresponse.info/' . $language . '/api/v1.0/locations?filter[admin_level]=' . $admin_level;

      while (TRUE) {
        $request = drupal_http_request($url);
        if (isset($request->data)) {
          $data = drupal_json_decode($request->data);
          if (empty($data['data'])) {
            return;
          }

          foreach ($data['data'] as $item) {
            if (isset($item['label']) && $item['label'] && isset($item['id']) && $item['id']) {
              $parent = 0;
              if (isset($item['parent'][0]['id'])) {
                $query = new EntityFieldQuery();
                $query->entityCondition('entity_type', 'taxonomy_term');
                $query->entityCondition('bundle', 'ms_location', '=');
                $query->fieldCondition('field_ms_hrinfo_id', 'value', $item['parent'][0]['id'], '=');
                $result = $query->execute();

                // Parent must exist.
                if (!isset($result['taxonomy_term'])) {
                  continue;
                }

                $parent_term = reset($result['taxonomy_term']);
                $term = taxonomy_term_load($parent_term->tid);
                $parent = $parent_term->tid;
              }

              $query = new EntityFieldQuery();
              $query->entityCondition('entity_type', 'taxonomy_term');
              $query->entityCondition('bundle', 'ms_location', '=');
              $query->fieldCondition('field_ms_hrinfo_id', 'value', $item['id'], '=');
              $result = $query->execute();

              $term = new stdClass();
              if (!isset($result['taxonomy_term'])) {
                $vocabularies = taxonomy_vocabulary_get_names();
                $term = (object) array(
                  'vid' => $vocabularies['ms_location']->vid,
                  'name' => $item['label'],
                  'vocabulary_machine_name' => 'ms_location',
                );
              }
              else {
                $tid = array_pop($result['taxonomy_term']);
                $term = taxonomy_term_load($tid->tid);
                if ($language != 'en' && !isset($term->translations->data[$language])) {
                  $translation = array(
                    'translate' => 0,
                    'status' => 1,
                    'language' => $language,
                    'source' => 'en',
                  );
                  $handler = entity_translation_get_handler('taxonomy_term', $term);
                  $handler->setTranslation($translation);
                }
              }

              if ($language == 'en') {
                $term->name = $item['label'];
              }
              $term->name_field[$language][0]['value'] = $item['label'];
              $term->field_ms_hrinfo_id[LANGUAGE_NONE][0]['value'] = $item['id'];
              $term->field_ms_pcode[LANGUAGE_NONE][0]['value'] = $item['pcode'];
              if ($parent) {
                $term->parent = $parent;
              }

              taxonomy_term_save($term);
            }
          }
          if (isset($data['next']) && isset($data['next']['href'])) {
            $url = $data['next']['href'];
          }
          else {
            break;
          }
        }
      }
    }
  }
}

/**
 * Delete all locations.
 */
function ms_locations_delete_all() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term');
  $query->entityCondition('bundle', 'ms_location', '=');
  $result = $query->execute();
  foreach ($result['taxonomy_term'] as $term) {
    taxonomy_term_delete($term->tid);
  }
}

/**
 * Retrieve original location from hrinfo.
 */
function ms_locations_fetch_original($id) {
  $url = 'https://www.humanitarianresponse.info/api/v1.0/locations/' . $id;
  $request = drupal_http_request($url);
  if (isset($request->data)) {
    $data = drupal_json_decode($request->data);
    $first = reset($data);
    $group = reset($first);
    return $group;
  }
  else {
    return NULL;
  }
}

/**
 * Implements hook_shs_json_callbacks_alter()
 * Allows filter by parent in the API
 */
function ms_locations_shs_json_callbacks_alter(&$callbacks) {
  $callbacks['shs_json_term_get_children']['callback'] = 'ms_locations_shs_json_term_get_children';
}

function ms_locations_shs_json_term_get_children($vid, $parent = array(), $settings = array(), $field = NULL) {
  $cache_key = "ms_locations_cache:" . $vid . '_' . md5(serialize($parent));
  $cache = cache_get($cache_key);

  if (!$cache || ($cache->expire && time() > $cache->expire)) {
    $scope = $result = array();
    foreach ($parent as $tid) {
      $scope[] = shs_term_get_children($vid, $tid, $settings);
      if (shs_add_term_access($vid, $tid, $field)) {
        $result[] = array(
          'vid' => $vid,
        );
      }
    }

    $has_children = _ms_locations_taxonomy_get_all_children($scope);

    // Rewrite result set to preserve original sort of terms through JSON request.
    foreach ($scope as $terms) {
      foreach ($terms as $tid => $label) {
        $result[] = array(
          'tid' => $tid,
          'label' => $label,
          'has_children' => array_key_exists($tid, $has_children) ? TRUE : FALSE,
        );
      }
    }
    cache_set($cache_key, $result, 'cache', REQUEST_TIME + 2*60*60);
    return $result;
  }

  return $cache->data;
}

function _ms_locations_taxonomy_get_all_children($scope) {
  $tids = array();
  foreach ($scope as $terms) {
    foreach ($terms as $tid => $label) {
      $tids[$tid] = $tid;
    }
  }

  if (empty($tids)) {
    return array();
  }

  $sql = 'SELECT DISTINCT parent, 1 FROM {taxonomy_term_hierarchy} WHERE parent IN (:tids)';
  $result = db_query($sql, array(':tids' => array_keys($tids)))->fetchAllAssoc('parent', PDO::FETCH_ASSOC);

  return $result;
}
